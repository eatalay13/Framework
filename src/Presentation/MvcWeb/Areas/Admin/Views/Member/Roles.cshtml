@{
    ViewData["Title"] = "Roller";
}

<div class="row mt-0 mt-lg-8">
    <div class="col-xl-12">
        <div class="card card-custom card-stretch card-shadowless gutter-b">
            <div class="card-header border-0 py-5">
                <h3 class="card-title align-items-start flex-column">
                    <span class="card-label font-weight-bolder text-dark">Roller</span>
                </h3>
            </div>
            <div class="card-body py-0">
                @(Html.DevExtreme().DataGrid<Entities.Dtos.RoleDevApiDto>()
                        .DataSource(ds => ds.Mvc()
                            .Controller("RoleApi")
                            .LoadAction("Get")
                            .InsertAction("Post")
                            .UpdateAction("Put")
                            .DeleteAction("Delete")
                            .Key("Id")
                        )
                        .AdvancedGridOptions()
                        .GridLeftButtons()
                        .OnRowInserted("function(e) { e.component.navigateToRow(e.key); }")
                        .RemoteOperations(true)
                        .Columns(columns => {

                            columns.AddFor(m => m.Name).Caption("Rol Adı");

                            columns.AddFor(m => m.RoleMenuIds).Caption("Yetkili Sayfalar").Width(750)
                            .Lookup(lookup => lookup
                                .DataSource(d => d.Mvc().Controller("NavigationMenuApi").LoadAction("Get").Key("Id"))
                                .ValueExpr("Id")
                                .DisplayExpr("Name")
                            )
                            .CellTemplate(new JS("cellTemplate"))
                            .EditCellTemplate(new TemplateName("RoleMenusTemplate"));

                        })
                        .Editing(e => e
                            .AllowAdding(true)
                            .AllowUpdating(true)
                            .AllowDeleting(true)
                        )
                    )
            </div>
        </div>
    </div>
</div>

@using (Html.DevExtreme().NamedTemplate("RoleMenusTemplate"))
{
    @(Html.DevExtreme().TagBox()
        .DataSource(d => d.Mvc().Controller("NavigationMenuApi").LoadAction("Get").Key("Id"))
        .Value(new JS("value"))
        .ValueExpr("Id")
        .DisplayExpr("Name")
        .ShowSelectionControls(true)
        .MaxDisplayedTags(3)
        .ShowMultiTagOnly(false)
        .ApplyValueMode(EditorApplyValueMode.UseButtons)
        .SearchEnabled(true)
        .OnValueChanged("function(e) { setValue(e.value); }")
        .OnSelectionChanged("function(e) { component.updateDimensions(); }")
    )
}

@section Scripts{
    <script>
        function cellTemplate(container, options) {
            console.log(container, options.column.lookup);
            var noBreakSpace = "\u00A0",
                text = (options.value || []).map(element => {
                    return options.column.lookup.calculateCellValue(element);
                }).join(", ");
            container.text(text || noBreakSpace).attr("title", text);
        }

        function onSelectionChanged(selectionChangedArgs, component) {
            var setValue = component.option('setValue');
            var selectedRowKey = selectionChangedArgs.selectedRowKeys[0];

            component.option('value', selectedRowKey);
            setValue(selectedRowKey);
            if (selectionChangedArgs.selectedRowKeys.length > 0) {
                component.close();
            }
        }
    </script>
}